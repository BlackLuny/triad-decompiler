#include <libdis.h>

#pragma once

enum var_type
{
	REG,
	GLOBAL,
	LOCAL,
	PARAM,
	CONST,
	DEREF
};

struct var //Later recycled as a search parameter struct for search_vars
{
	char* name;
	char* c_type;
	enum var_type type;
	union
	{
		unsigned int addr;
		int disp;
	} loc; //Location in memory of variable or value of constant
	struct var* next; //Also used as a return field in search_vars
};
typedef struct var var;

extern int name_ind; //Furthest "digit" of name modified
extern char last_name [20]; //Last name generated by gen_var_name
extern char c_types [4][10]; //String representations of data types in a normal C program, e.g. char or int
char constant_format [3];

var* var_list;
var* global_list;
var* callee_param; //Linked list of parameters passed to current function
var* caller_param; //Dynamically allocated array filled with copies of the variables being passed to a function called within this function
int num_caller_params;
size_t caller_params_size;

char* gen_var_name (void); //Generates a unique variable name
var* init_var (var* to_init, x86_op_t operand); //Translates an operand into a C style variable
var* add_var (x86_op_t operand); //Add variable to linked list if not a dupe
void search_vars (var* to_check, var* key);
void cleanup_var (var* to_cleanup);
void clean_var_list (var* to_cleanup);
